{
  "only": {
    "prefix": "only",
    "body": "only: %i[${1:method}]"
  },
  "except": {
    "prefix": "except",
    "body": "except: %i[${1:method}]"
  },
  "find_by": {
    "prefix": "find_by",
    "body": "find_by(${1:key}: ${2:value})"
  },
  "find_by_params": {
    "prefix": "find_by_params",
    "body": "find_by(${1:id_name}: params[:${2:param}])"
  },
  "before_action": {
    "prefix": "before_action",
    "body": "before_action :${1:id}"
  },
  "where": {
    "prefix": "where",
    "body": "where(${condition})"
  },
  "rake": {
    "prefix": "rake",
    "body": [
      "namespace :$1 do",
      "\tdesc \"$2\"",
      "\ttask $3: :environment do",
      "\t\t$4",
      "\tend",
      "end"
    ]
  },
  "route get": {
    "prefix": "get",
    "body": "get '/${1:route}', to: '${2:controller}#${3:method}'"
  },
  "route post": {
    "prefix": "post",
    "body": "post '/${1:route}', to: '${2:controller}#${3:method}'"
  },
  "route patch": {
    "prefix": "patch",
    "body": "patch '/${1:route}', to: '${2:controller}#${3:method}'"
  },
  "route put": {
    "prefix": "put",
    "body": "put '/${1:route}', to: '${2:controller}#${3:method}'"
  },
  "route delete": {
    "prefix": "delete",
    "body": "delete '/${1:route}', to: '${2:controller}#${3:method}'"
  },
  "resources": {
    "prefix": "res",
    "body": "resources :${1:res_name}"
  },
  "resources block": {
    "prefix": "reb",
    "body": [
      "resources :${1:res_name} do",
      "\t$2",
      "end"
    ]
  },
  "resources collection": {
    "prefix": "rescb",
    "body": [
      "resources :${1:res_name} do",
      "\tcollection do",
      "\t\t$2",
      "\tend",
      "end"
    ]
  },
  "resources_member": {
    "prefix": "resmember",
    "body": [
      "resources :${1:res_name} do",
      "\tmember do",
      "\t\t$2",
      "\tend",
      "end"
    ]
  },
  "member": {
    "prefix": "member",
    "body": [
      "member do",
      "\t$0",
      "end"
    ]
  },
  "collection": {
    "prefix": "collection",
    "body": [
      "collection do",
      "\t$0",
      "end"
    ]
  },
  "render": {
    "prefix": "render",
    "body": "render $0"
  },
  "redirect_to": {
    "prefix": "redirect_to",
    "body": "redirect_to ${1:path}"
  },
  "redirect_to_msg": {
    "prefix": "redirect_to_msg",
    "body": "redirect_to ${path}, notice: '${msg}'"
  },
  "has_one": {
    "prefix": "has_one",
    "body": "has_one :"
  },
  "dependent": {
    "prefix": "dep",
    "body": "dependent: :${1:id}"
  },
  "has_one_dependent": {
    "prefix": "has_one_dep",
    "body": "has_one :${1:id}, dependent: :${2:type}"
  },
  "has_many": {
    "prefix": "hasmany",
    "body": "has_many :$0"
  },
  "has_many_through": {
    "prefix": "has_many_through",
    "body": "has_many :${1:model1}, through: :${2:model2}"
  },
  "has_many_dependent": {
    "prefix": "has_many_dependent",
    "body": "has_many :${1:id}, dependent: :${2:type}"
  },
  "belongs_to": {
    "prefix": "belongs_to",
    "body": "belongs_to :"
  },
  "belongs_to_cache": {
    "prefix": "belongs_to_cache",
    "body": "belongs_to :${1:id}, cache: ${2:true}"
  },
  "has_and_belongs_to_many": {
    "prefix": "has_and_belongs_to_many",
    "body": "has_and_belongs_to_many :${1:id}"
  },
  "add_column": {
    "prefix": "add_column",
    "body": "add_column :${1:table}, :${2:column}, :${3:type}"
  },
  "add_reference": {
    "prefix": "add_reference",
    "body": "add_reference :${1:table}, :${2:column}, foreign_key: true"
  },
  "t.binary(tcbi)": {
    "prefix": "binary",
    "body": "t.binary :"
  },
  "t.boolean(tcb)": {
    "prefix": "boolean",
    "body": "t.boolean :"
  },
  "t.date(tcda)": {
    "prefix": "date",
    "body": "t.date :"
  },
  "t.datetime(tcdt)": {
    "prefix": "datetime",
    "body": "t.datetime :"
  },
  "t.decimal(tcd)": {
    "prefix": "decimal",
    "body": "t.decimal :"
  },
  "t.float(tcf)": {
    "prefix": "float",
    "body": "t.float :"
  },
  "t.integer(tci)": {
    "prefix": "integer",
    "body": "t.integer :"
  },
  "t.references(tcr)": {
    "prefix": "references",
    "body": "t.references :"
  },
  "t.string(tcs)": {
    "prefix": "string",
    "body": "t.string :"
  },
  "t.text(tct)": {
    "prefix": "text",
    "body": "t.text :"
  },
  "t.time(tcti)": {
    "prefix": "time",
    "body": "t.time :"
  },
  "t.timestamp(tcts)": {
    "prefix": "timestamp",
    "body": "t.timestamp :"
  },
  "t.timestamps(tctss)": {
    "prefix": "timestamps",
    "body": "t.timestamps\n$0"
  },
  "validates": {
    "prefix": "validates",
    "body": "validates :${1:column}, presence: true"
  },
  "params": {
    "prefix": "params",
    "body": "params.require(:$1).permit(:$0)"
  },
  "param1": {
    "prefix": "para1",
    "body": "params['$0']"
  },
  "param2": {
    "prefix": "para2",
    "body": "params['$1']['$0']"
  },
  "param3": {
    "prefix": "para3",
    "body": "params['$1']['$2']['$0']"
  },
  "permit": {
    "prefix": "permit",
    "body": "permit($0)"
  },
  "controller": {
    "prefix": "controller",
    "body": [
      "class ${1:Name}Controller < ApplicationController",
      "\t$0",
      "end"
    ]
  },
  "index_method": {
    "prefix": "index",
    "body": [
      "def index",
      "\t$0",
      "end"
    ]
  },
  "create_method": {
    "prefix": "create",
    "body": [
      "def create",
      "\t$0",
      "end"
    ]
  },
  "new_method": {
    "prefix": "new",
    "body": [
      "def new",
      "\t$0",
      "end"
    ]
  },
  "edit_method": {
    "prefix": "edit",
    "body": [
      "def edit",
      "\t$0",
      "end"
    ]
  },
  "show": {
    "prefix": "show",
    "body": [
      "def show",
      "\t$0",
      "end"
    ]
  },
  "update": {
    "prefix": "update",
    "body": [
      "def update",
      "\t$0",
      "end"
    ]
  },
  "destroy": {
    "prefix": "destroy",
    "body": [
      "def destroy",
      "\t$0",
      "end"
    ]
  },
  "CRUD": {
    "prefix": "CRUD",
    "body": [
      "def index",
      "\t$0\nend",
      "\ndef new",
      "\nend",
      "\ndef create",
      "\nend",
      "\ndef edit",
      "\nend",
      "\ndef update",
      "\nend",
      "\ndef show",
      "\nend",
      "\ndef destroy",
      "\nend"
    ]
  }
}